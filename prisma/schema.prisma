 

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql" 
    url      = env("DATABASE_URL")
}
 
 
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[] 
    interviews    InterviewRecord[]
 
    resume       Resume?   
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Resume {
    id          String   @id @default(cuid())
    name        String
    fileUrl     String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt 

    userId      String   @unique
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Interview {
    id                  String   @id @default(cuid())
    name                String
    description         String
    duration            String    
    characteristics     String[]
    companySimilarTo    String[]
    interviewType       String  // Types: technical, behavioral, system_design 
    botIconUrl          String?
    vapiBotId           String
    backgroundUrl       String?
}

model InterviewRecord {
    id                          String   @id @default(cuid())
    interviewId                 String
    vapiBotId                   String
    status                      String      // Types: Scheduled, Completed, Cancelled, Rescheduled
    interviewType               String      @default("behavioral")// Types: technical, behavioral, system_design    
    name                        String
    description                 String 
    companySimilarTo            String[]
    characteristics             String[]

    startTime                   DateTime?
    endTime                     DateTime?
    feedback                    String?   
    resumeId                    String?

    analysisStatus              String? // Types: Pending, In Progress, Completed
    analysisResult              String? // JSON string containing the analysis result

    vapiCallId                  String? // ID of the VAPI call associated with this record
    usersCode                   String? // Code generated by the user during the interview
    usersNotes                  String? // Notes taken by the user during the interview
    userId                      String
    user                        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

